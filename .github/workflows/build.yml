name: build

# build on c/cpp changes or workflow changes
on:
  push:
    paths:
      - 'lib/**.[ch]'
      - 'lib/**.cpp'
      - 'src/**.[ch]'
      - 'src/**.cpp'
      - '**/CMakeLists.txt'
      - 'cmake/Modules/**'
      - '.github/workflows/**.yml'
  pull_request:
    paths:
      - 'lib/**.[ch]'
      - 'lib/**.cpp'
      - 'src/**.[ch]'
      - 'src/**.cpp'
      - '**/CMakeLists.txt'
      - 'cmake/Modules/**'
      - '.github/workflows/**.yml'

jobs:
  linux:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3
      - name: Install deps
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends cmake g++-12 libluajit-5.1-dev libpng-dev libjpeg-dev libxi-dev libgl1-mesa-dev libogg-dev libgmp-dev libvorbis-dev libopenal-dev libzstd-dev
          git clone https://github.com/rollerozxa/irrlicht-vmc lib/irrlichtmt --depth 1

      - name: Build
        run: |
          cmake -B build -DRUN_IN_PLACE=TRUE
          cmake --build build --parallel 4

  windows:
    runs-on: windows-latest
    defaults:
      run:
        shell: msys2 {0}
    steps:
      - uses: actions/checkout@v3

      - uses: msys2/setup-msys2@v2
        with:
          update: true
          msystem: UCRT64
          install: >-
            git
            mingw-w64-ucrt-x86_64-gcc
            mingw-w64-ucrt-x86_64-cmake
            mingw-w64-ucrt-x86_64-ninja
            mingw-w64-ucrt-x86_64-libpng
            mingw-w64-ucrt-x86_64-luajit
            mingw-w64-ucrt-x86_64-openal
            mingw-w64-ucrt-x86_64-libogg
            mingw-w64-ucrt-x86_64-libvorbis
            mingw-w64-ucrt-x86_64-zstd

      - name: Install external packages
        run: |
          wget https://grejer.voxelmanip.se/msys-pkgs/mingw-w64-ucrt-x86_64-freetype-2.13.2-1-any.pkg.tar.zst
          pacman -U --noconfirm *.pkg.tar.zst

          git clone https://github.com/rollerozxa/irrlicht-vmc lib/irrlichtmt --depth 1

      - name: Build
        run: |
          mkdir build
          cd build
          cmake .. -DRUN_IN_PLACE=0 -DENABLE_SYSTEM_GMP=OFF -DENABLE_SYSTEM_JSONCPP=OFF -G Ninja
          ninja -j4

      - name: Bundle up and package
        run: |
          cd build
          mkdir dlls
          for dll in $(ldd ../voxelmanip_classic.exe | grep $MINGW_PREFIX | sed 's/.* => //' | sed 's/ \(.*\)//'); do cp $dll dlls/; done
          ninja package

      - name: Upload output as artifact
        uses: actions/upload-artifact@v2
        with:
          path: build/voxelmanip_classic-*-win64.zip
